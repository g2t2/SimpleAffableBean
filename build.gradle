/*
 * This build file was developed using the following reference materials:
 * https://docs.gradle.org/current/userguide/war_plugin.html
 * https://docs.gradle.org/current/dsl/org.gradle.api.Task.html
 * https://docs.gradle.org/3.4.1/dsl/org.gradle.api.tasks.bundling.War.html
 * http://stackoverflow.com/questions/6683375/how-do-i-add-a-properties-file-into-my-war-using-gradle
 *
 * For running tests:
 * https://github.com/junit-team/junit5-samples/tree/master/junit5-gradle-consumer
 */

import com.hierynomus.gradle.license.tasks.LicenseFormat
import com.hierynomus.gradle.license.tasks.LicenseCheck

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        /*
         * Required for junit 5.
         */
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4'
    }
}

/*
 * Required for newer plugins.
 */
plugins {
    id "com.github.hierynomus.license" version "0.14.0"
    id 'org.unbroken-dome.test-sets' version '1.3.2'
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: "com.github.hierynomus.license"

allprojects {
    compileJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

compileTestJava {
    /*
     * For JUnit5: This stores formal parameter names of constructors and methods in the generated class file so that the method
     * java.lang.reflect.Executable.getParameters from the Reflection API can retrieve them.
     */
    options.compilerArgs += '-parameters'
}

repositories {
    mavenCentral()
}

sourceSets {
    main
    test
}

/*
 * Use 'gradle qa' with a running web application to run acceptance tests.
 */
testSets {
    qa { createArtifact = true }
}

/*
 * Let's list out all our dependencies.  They will be downloaded for us and managed
 * by Gradle.
 */
dependencies {

    // Declare version for tomcat and junit5 that are used for multiple libraries.
    ext.tomcatVersion = '8.5.20'
    ext.junit5Version = '5.0.0-M4'
    ext.junitPlatformVersion = '1.0.0-M4'
    ext.slf4jVersion = '1.7.25'
    ext.jacksonVersion = '2.8.4'
    ext.jerseyVersion = '2.25.1'

    // Using sfl4j allows us to replace different loggers later, if desired
    compile group: 'org.slf4j', name:'slf4j-api', version: "$slf4jVersion"

    // slf4j is just a facade for loggers. To actually get logging to work, you need to
    // tie it in with some actual implementation, e.g., log4j2, logback or slf4j-simple
    compile group: 'org.slf4j', name:'slf4j-simple', version: "$slf4jVersion"

    // These are for model object caching in the dao layer
    compile group: 'com.google.guava', name: 'guava', version: '22.0-rc1'

    // These declare dependencies on tomcat libraries, letting us use container code.
    // These may be necessary if we want to run tomcat using a plugin in future.
    providedCompile  group: 'org.apache.tomcat', name: 'tomcat-servlet-api', version: "$tomcatVersion"
    compile group: 'org.apache.tomcat', name: 'tomcat-catalina', version: "$tomcatVersion"
    compile group: 'org.apache.tomcat', name: 'tomcat-juli', version: "$tomcatVersion"

    // These let us use the standard tag libraries in our JSP files.
    compile group: 'javax.servlet',      name: 'jstl',                    version: '1.2'
    compile group: 'org.apache.taglibs', name: 'taglibs-standard-compat', version: '1.2.5'
    compile group: 'org.apache.taglibs', name: 'taglibs-standard-spec', version: '1.2.5'
    compile group: 'org.apache.taglibs', name: 'taglibs-standard-jstlel', version: '1.2.5'
    compile group: 'org.apache.taglibs', name: 'taglibs-standard-impl', version: '1.2.5'
   	compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.40'

    //Jersey / JSON REST service dependencies

    compile group: 'com.fasterxml.jackson.core', name:'jackson-core', version:"$jacksonVersion"
    compile group: 'com.fasterxml.jackson.core', name:'jackson-databind', version:"$jacksonVersion"


    compile group: 'org.glassfish.jersey.containers', name:'jersey-container-servlet', version:"$jerseyVersion"
    compile group: 'org.glassfish.jersey.bundles.repackaged', name:'jersey-guava', version:"$jerseyVersion"
    compile group: 'org.glassfish.jersey.media', name:'jersey-media-json-jackson', version:"$jerseyVersion"
    compile group: 'org.glassfish.jersey.core', name:'jersey-server', version:"$jerseyVersion"
    compile group: 'javax.ws.rs', name:'javax.ws.rs-api', version:'2.0.1'

    // These are needed for running junit5 tests
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "$junit5Version"
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "$junit5Version"
    testCompile group: 'org.junit.platform', name: 'junit-platform-gradle-plugin', version: "$junitPlatformVersion"
    testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: "$junitPlatformVersion"
    testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: "$junitPlatformVersion"
    testCompile group: 'org.junit.platform', name: 'junit-platform-console', version: "$junitPlatformVersion"
    testCompile group: 'org.junit.platform', name: 'junit-platform-commons', version: "$junitPlatformVersion"
    testCompile group: 'org.opentest4j', name: 'opentest4j', version: '1.0.0-M2'

    // These are only used for QA acceptance tests
    qaCompile group: 'org.seleniumhq.selenium', name: 'selenium-htmlunit-driver', version: '2.52.0'

}

/*
 * Use 'gradle war' to place the WAR file in build/libs.
 *
 * Here we ensure two extra concerns:
 * - copy the messages files into WEB-INF/classes/resources for language support
 * - include the Java source code in the WAR artifact
 */
war {
    from('src/main/java/resources') {
        include '*.properties'
        into ('WEB-INF/classes/resources')
    }
    from('src/main/java') {
        include '**/*.java'
        into ('WEB-INF/classes')
    }
}

/*
 * junit5 will work for all test classes ending in 'Test'.
 * Use 'gradle clean junitPlatformTest' to run these tests.
 */
junitPlatform {
    // platformVersion '1.0.0-M4'
    filters {
        engines {
            // include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
         includeClassNamePattern '.*Test'
    }
    enableStandardTestTask false
    // reportsDir file('build/test-results/junit-platform') // this is the default
}

/*
 * Configure license headers.
  * Use 'gradle license' to check headers in all files, and
  * use 'gradle licenseFormat' to apply the latest LICENSE to all files.
 */
license {
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Steven Atkinson'
    ext.email = 'support@simpleaffablebean.com'
    strictCheck true
    mapping {
        jspf = 'DYNASCRIPT_STYLE'
    }
    excludes(["**/ScriptRunner.java", "**/*.gif", "**/*.png", "**/*.ico", "**/*.jpg", "**/MANIFEST.MF", "**/jquery-*.js"])
}

task licenseDb(type: LicenseCheck) {
    description 'Check web resource file licenses'
    source = fileTree(dir: "src/main/db").include("**/*.sql")
}

task licenseFormatDb(type: LicenseFormat) {
    description 'Format licenses in sql files'
    source = fileTree(dir: "src/main/db").include("**/*.sql")
}

task licenseWeb(type: LicenseCheck) {
    description 'Check web resource file licenses'
    source = fileTree(dir: "src/main/webapp")
}

task licenseFormatWeb(type: LicenseFormat) {
    description 'Format web resource file licenses'
    source = fileTree(dir: "src/main/webapp")
}

licenseMain {
    dependsOn licenseWeb, licenseDb
}
licenseFormatMain {
    dependsOn licenseFormatWeb, licenseFormatDb
}
